@using BlazorContacts.Models;
@inject HttpClient client
@inject Data.Functionalities func

<!--Blok określający, że mamy do czynienia z modalem-->
<div class="modal" style="display: @(IsAddModalOpen ? "block" : "none"); top: 50%; left: 50%; transform: translate(-50%, -50%);">
    <div class="modal-content">
        <h3>Dodaj nowy kontakt</h3>
        <!--Forma przyjmująca dane wg modelu ContactModel.cs-->
        <EditForm Model="@newContact" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="FirstName">Imię:</label>
                <InputText @bind-Value="newContact.FirstName" class="form-control" />
                <ValidationMessage For="@(() => newContact.FirstName)" />
            </div>

            <div class="form-group">
                <label for="LastName">Nazwisko:</label>
                <InputText @bind-Value="newContact.LastName" class="form-control" />
                <ValidationMessage For="@(() => newContact.LastName)" />
            </div>

            <div class="form-group">
                <label for="PhoneNumber">Numer telefonu:</label>
                <InputText @bind-Value="newContact.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => newContact.PhoneNumber)" />
            </div>

            <div class="form-group">
                <label for="Mail">Adres e-mail:</label>
                <InputText @bind-Value="newContact.Mail" class="form-control" />
                <ValidationMessage For="@(() => newContact.Mail)" />
            </div>

            <div class="form-group">
                <label for="Password">Hasło:</label>
                <InputText @bind-Value="newContact.Password" class="form-control" />
                <ValidationMessage For="@(() => newContact.Password)" />
                <!--Dodatkowy label pozwalający na wyświetlenie czerwonego powiadomieniu o błędnym haśle-->
                <label style="color: red">@errorMsg</label>
            </div>

            <div class="form-group">
                <label for="DateOfBirth">Data urodzenia:</label>
                <InputText @bind-Value="newContact.DateOfBirth" class="form-control" />
                <ValidationMessage For="@(() => newContact.DateOfBirth)" />
            </div>

            <div class="form-group">
                <InputSelect @bind-Value="newContact.Category" class="form-control">
                    <option value="Work">Służbowy</option>
                    <option value="Personal">Prywatny</option>
                    <option value="Other">Inne</option>
                </InputSelect>
            </div>
            @if (newContact.Category == "Work")
            {
                   <div class="form-group">
                       <InputSelect @bind-Value="newContact.Subcategory" class="form-control">
                           <option value="Boss">Szef</option>
                           <option value="Client">Klient</option>
                           <option value="Associate">Współpracownik</option>
                       </InputSelect>
                   </div>
            }
            else
            {
                <div class="form-group">
                    <label for="Subcategory">Podkategoria:</label>
                    <InputText @bind-Value="newContact.Subcategory" class="form-control" />
                    <ValidationMessage For="@(() => newContact.Subcategory)" />
                </div>
            }

            <!--Przycisk zbiera dane z formy i wysyłający je dalej, w tym przypadku ma je zapostować do API-->
            <button type="submit" class="btn btn-primary">Zapisz</button>
        </EditForm>
        <!--Przycisk zamykający modala-->
        <button @onclick="CloseAddModal">Zamknij</button>
    </div>
</div>

@code {
    // Paramtery
    [Parameter] public bool IsAddModalOpen { get; set; }
    [Parameter] public EventCallback<bool> IsAddModalOpenChanged { get; set; }
    private string errorMsg;

    private ContactModel newContact = new ContactModel();

    // Metoda zamykająca modala
    private void CloseAddModal()
    {
        IsAddModalOpen = false;
        IsAddModalOpenChanged.InvokeAsync(IsAddModalOpen);
    }

    // Metoda wykonywana po wciśnięciu przycisku ZAPISZ. Sprawdza czy hasło jest zgodne z wytycznymi za pomocą metody znajdującej się w Data/Functionalities.cs
    private async Task HandleValidSubmit()
    {
        if (!func.SprawdzZlozonoscHasla(newContact.Password))
        {
            errorMsg = "Hasło nieprawidłowe";
        }
        else
        {
            // Jeśli hasło przejdzie przez weryfikacje, poniższy kod jest wykonywany i wstawiamy newContact do DB przez API POST
            await client.PostAsJsonAsync("/api/ContactModel", newContact);
            CloseAddModal();
        }  
    }

}
